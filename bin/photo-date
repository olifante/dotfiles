#!/bin/bash

# this script changes date of pics from directory or single pic given in parameter using jhead argument
# note: needs bash version >= 3.2 (for regex comparaison)
# Vivien DIDELOT a.k.a v0n

SCRIPT=$(basename $0) 
ERR=65

CHECK=false
RECURSIVE=false
SEC_INC=30

#set -e # may cause unwanted exit with jhead

# check dependences
if [ -z "$(which jhead)" ] ; then
	echo "missing \`jhead' package." >&2
	exit $ERR
fi

##### FUNCTIONS #####

function PrintUsage
{
	echo "Usage:"
	echo "$SCRIPT -h"
	echo "$SCRIPT [-r|--recursive] -c|--check DIRECTORY|FILE"
	echo "$SCRIPT [-r|--recursive] <jhead option> DIRECTORY|FILE"
}

function PrintHelp
{
	PrintUsage
	echo
	echo "-c option will check date of every pics and exit."
	echo
	echo "<jhead option> should be a valid jhead date modification option (without hyphen) :"
	printf "%-25s - %s\n" "ta<+|-><timediff>" "adjust time"
	printf "%-25s - %s\n" "tsyyyy:mm:dd-hh:mm:ss" "set time"
	printf "%-25s - %s\n" "dsyyyy:mm:dd" "set date"
	echo "see also jhead documentation (man jhead)."
	exit 0
}

function CheckFile
{
	DATE=$(jhead "$1" | grep "Date/Time")

	printf "file: %-32s" "$(basename "$1")"
	if [ -z "$DATE" ]
		then echo "WARNING: no exif date"
		else echo "date: $(echo "$DATE" | awk '{print $3}') time: $(echo "$DATE" | awk '{print $4}')"
	fi
}

function ProcessFile
{
	DATE=$(jhead "$2" | grep "Date/Time")
	[ -z "$DATE" ] && jhead -mkexif "$2"
	jhead -$1 "$2" # uses jhead with option given in parameter
	jhead -q -se -ft "$2" # sets creation date with exif timestamp
}

##### CHECK PARAMETERS #####

while getopts "hcr-:" OPTION
do
	# check long options
	[ $OPTION = "-" ] && case "${OPTARG%%=*}" in
		help) OPTION="h" ;;
		check) OPTION="c" ;;
		recursive) OPTION="r" ;;
		*) echo "option longue non permise -- ${OPTARG%%=*}" >&2 ; exit $ERROR ;;
	esac
	case $OPTION in
		h)
			PrintHelp
			exit 0 ;;
		c)
			CHECK=true ;;
		r)
			RECURSIVE=true ;;
		*) 
			echo "$SCRIPT: unknow option." >&2
			PrintUsage
			exit $ERROR ;;
	esac
done

shift $((OPTIND - 1))

if $CHECK ; then
	if [ $# -ne 1 ] ; then
		PrintUsage
		exit $ERR
	else
		SOURCE="$1"
	fi
else
	if [ $# -ne 2 ] ; then
		PrintUsage
		exit $ERR
	else
		OPTION="$1"
		SOURCE="$2"
		if [[ ! "$OPTION" =~ ^(ta[+-][0-9]{2}|ts[0-9]{4}(:[0-9]{2}){2}-([0-9]{2}:){2}[0-9]{1,3}|ds[0-9]{4}(:[0-9]{2}){2})$ ]] ; then
			echo "$SCRIPT: not a valid jhead option." >&2
			PrintUsage
			exit $ERR
		fi
	fi
fi

SOURCE="${SOURCE%/}"
[ ! -e "$SOURCE" ] && echo "$SCRIPT: \`$SOURCE' unreachable." >&2 && exit $ERR

##### PROGRAM #####

if $CHECK ; then
	if [ -d "$SOURCE" ] ; then
		for thisFILE in "$SOURCE"/* ; do
			if [ -d "$thisFILE" ] ; then
				if $RECURSIVE ; then
					$0 --check --recursive "$thisFILE"
				else
					printf "file: %-32s%s\n" "$(basename "$thisFILE")" "WARNING: is a directory, not processed (use recursive mode if needed)." >&2
				fi
			else
				if [ "$(file -b "$thisFILE" | grep 'JPEG image')" ]
					then CheckFile "$thisFILE"
					else printf "file: %-32s%s\n" "$(basename "$thisFILE")" "WARNING: is not a pic, not processed." >&2
				fi
			fi
		done
	else
		if [ "$(file -b "$SOURCE" | grep 'JPEG image')" ]
			then CheckFile "$SOURCE"
			else printf "file: %-32s%s\n" "$(basename "$SOURCE")" "WARNING: is not a pic, not processed." >&2
		fi
	fi
else # process files
	if [ -d "$SOURCE" ] ; then
		chmod +w "$SOURCE"/*
		for thisFILE in "$SOURCE"/* ; do
			if [ -d "$thisFILE" ] ; then
				if $RECURSIVE ; then
					$0 --recursive $OPTION "$thisFILE"
				else
					printf "file: %-32s%s\n" "$(basename "$thisFILE")" "WARNING: is a directory, not processed (use recursive mode if needed)." >&2
				fi
			else
				if [ "$(file -b "$thisFILE" | grep 'JPEG image')" ] ; then
					# if ts then SEC++
					if [ $(echo $OPTION | grep ts) ] ; then
						SEC=$(echo $OPTION | cut -d: -f5)
						SEC=$((SEC + SEC_INC))
						OPTION=$(echo $OPTION | cut -d: -f5 --complement):$SEC
					fi
					ProcessFile $OPTION "$thisFILE"
				else printf "file: %-32s%s\n" "$(basename "$thisFILE")" "WARNING: is not a pic, not processed." >&2
				fi
			fi
		done
	else
		if [ "$(file -b "$SOURCE" | grep 'JPEG image')" ]
			then ProcessFile $OPTION "$SOURCE"
			else printf "file: %-32s%s\n" "$(basename "$SOURCE")" "WARNING: is not a pic, not processed." >&2
		fi
	fi
fi

exit 0
